# pkImageConverter plugin #

"What is pkImageConverterPlugin?"

pkImageConverterPlugin is a high-speed, low-memory-usage tool for converting, scaling and
cropping images without bumping into PHP's memory limit. When enabled, pkImageConverterPlugin
uses the netpbm utilities to achieve these goals. These are scanline-based 
command line utilities that never load an entire image into memory at once.
This makes importing huge originals practical.

However, if explicitly selected, pkImageConverterPlugin can use the gd library. This change was made because many webmasters don't have root access to their servers to install netpbm, can't convince
their hosts to do it for them, and/or just plain don't want to, no matter how big the
performance boost is.

## Requirements ##

You must have EITHER support for gd in PHP, OR the netpbm utilities (of course it's fine
if you have both). 

Good hosts already have both installed. Others can easily install them. 

## For gd (possibly easier, but slow and memory-hungry) ##

Check the output of the phpinfo() command on a test page. If gd support is not listed,
you may have to install it. Most competent hosting companies give you gd as standard
equipment in PHP, but not every hosting company is competent.

For a Debian or Ubuntu Linux host:

		apt-get install php5-gd

For a Mac, just use the MAMP version of Apache and PHP rather than the built-in one.
(Note: early reports are that Snow Leopard has gd built correctly in its standard PHP.)

Most Windows PHP server configurations will already include gd.

Note that you cannot import PDF documents with gd. JPEG, GIF, PNG and BMP files can be imported.
You may hit your PHP memory limit when attempting to import large originals. For these
reasons, netpbm is better if you can install it. (Windows users should stick with gd
as the use of certain Unix shell features makes it difficult to port our netpbm
support to Windows hosts.)

Now explicitly disable netpbm:

    all:
      pkimageconverter:
        # You must explicitly disable the use of netpbm
        netpbm: false

If you do not disable netpbm, pkImageConverterPlugin will default to using netpbm and
will not attempt to use gd.

## For netpbm (much better, but possibly not on your host... yet) ##

For a Debian or Ubuntu-based Linux host:

		apt-get install netpbm

Mac users who use MacPorts can install netpbm with MacPorts:

    port install netpbm

After you do the above, the commands in question probably still won't be in 
the PATH environment variable for MAMP servers. So type:

`which ppmtogif`

Make a note of the folder it's in, and set things up in `app.yml`
to help pkImageConverter find the programs:

    all:
      pkimageconverter:
        # You must explicitly enable the use of netpbm
        netpbm: true
        path: /wherever/they/are

Be sure to do a `symfony cc` and the tools should now be found.
Note that you can use different settings for dev and prod to get
this working on your development PC and the production server.

While the netpbm utilities exist for Windows, this plugin's netpbm support won't work without 
modification on a Windows host because of the use of various sh shell
tricks to hide noisy messages from the netpbm utilities. So we recommend using gd on
a Windows host, especially if it's just your personal testing and debugging box. 
Set the memory limit high.

## For PDF Import ##

To add support for PDF as an input format, producing renderings of
the first page in the requested output image format, you must use netpbm and also
install the ghostscript package. For a Mac:

    port install ghostscript

For a Linux host:

    apt-get install ghostscript
    
You may also need a ghostscript-fonts package depending on your operating system.

## Usage ##

Scale to largest size that does not exceed a width of 400 pixels or a
height of 300 pixels, but preserve aspect ratio, so the final image
will not be exactly 400x300 unless the original has a 4/3 ratio:

    pkImageConverter::scaleToFit("inputfile.jpg", "outputfile.jpg", 400, 300);

If width or height is false (not zero), the other parameter will be
honored exactly and the mising parameter will be scaled accordingly to 
preserve the aspect ratio.

Or to produce an image which is 50% of original size:

    pkImageConverter::scaleByFactor("inputfile.jpg", "outputfile.jpg", 0.5);

Sometimes preserving the entire input image is not as important as
producing a copy with a certain aspect ratio. To scale and crop at
the same time, taking the largest portion of the center of the original
image that scales without distortion into the desired destination image:

    pkImageConverter::cropOriginal("inputfile.jpg", "outputfile.jpg", 600, 450);

The resulting image will be exactly 600x450 pixels, even if this requires
leaving out part of the original.

One more: scaleToNarrowerAxis. scaleToNarrowerAxis produces output
images in which either the width or height will match the request and
the other dimension will EXCEED the request (unless the aspect ratio
of the original is exactly the same as the destination). This is handy
for creating images that you intend to crop with CSS. The result is
prettier than letterboxing.

    pkImageConverter::scaleToNarrowerAxis("inputfile.jpg", "outputfile.jpg", 600, 450); 

Finally, you might want to simply convert between formats without
scaling or cropping:

    pkImageConverter::convertFormat("inputfile.jpg", "outputfile.png");

An optional JPEG quality argument may be specified as the final argument
to all of these functions. The default JPEG quality is 75. JPEG quality
is not a percentage, there is very little quality difference above
85 or so. The quality argument is ignored for other output formats.

The input file does not have to be in JPEG format. If you are using gd, it can be in GIF, JPEG, PNG or BMP format, provided PHP's
gd support was compiled with support for those formats on your system
(see the output of phpinfo()). If you are using netpbm (the default), the original can be
in just about any format, certainly GIF, JPEG, PNG, TIFF and BMP. 
Even PDFs are supported if ghostscript is installed on the host.

With netpbm, the output file can be in gif, jpeg, tiff, bmp, png, ppm, pbm, or pgm
format (netpbm supports more, this is just what I've had time to list
in the output filter array). With gd, the output file can be in 
GIF, JPEG, or PNG format, provided that gd was built with support for
that format.

The output file format is determined by the file extension. The input
file format is automatically detected based on its contents, not its extension.
This means you can convert a file uploaded to PHP via the web *without renaming it first.*

